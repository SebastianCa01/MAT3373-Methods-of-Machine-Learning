#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
err.rate <- incorrect/length(ypred)
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
err.rate <- incorrect/length(ypred)
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
err.rate <- incorrect/length(ypred)
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
# inputs:
# ytrue is a vector of true binary responses (0 or 1)
# ypred is a vector of binary predictions (0 or 1)
# yprob is a vector of probabilistic predictions (between 0 and 1)
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
ypred[1]
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect <- 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect <- incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
ypred[1]
ytrue[1]
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
error.rate = function(ypred, ytrue){
# fill this in
incorrect = 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect = incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
# inputs:
# ytrue is a vector of true binary responses (0 or 1)
# ypred is a vector of binary predictions (0 or 1)
# yprob is a vector of probabilistic predictions (between 0 and 1)
error.rate = function(ypred, ytrue){
# fill this in
incorrect = 0
for (i in length(ypred)){
if (ypred[i] != ytrue[i]){
incorrect = incorrect + 1
}
}
(err.rate <- incorrect/length(ypred))
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
ypred[1]
ytrue[1]
print(paste('Error rate = ', error.rate(ypred, ytrue)))
#print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
# inputs:
# ytrue is a vector of true binary responses (0 or 1)
# ypred is a vector of binary predictions (0 or 1)
# yprob is a vector of probabilistic predictions (between 0 and 1)
error.rate = function(ypred, ytrue){
# fill this in
correct = 0
for (i in length(ypred)){
if (ypred[i] == ytrue[i]){
correct = correct + 1
}
}
incorrect = length(ytrue)-correct
err.rate = incorrect/length(ypred)
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
loss.vector = c()
for (i in length(yprob)){
loss.vector = c(loss.vector,-ytrue[i]*log(yprob[i]) - (1 - ytrue[i])*log(1 - yprob[i]))
}
mean.log.loss = mean(loss.vector)
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
(0.5978+1.6094)/2
((-0*log(0.8) - (1 - 0)*log(1 - 0.8))+(-1*log(0.55) - (1 - 1)*log(1 - 0.55)))/2
?mean
((-0*log(0.8) - (1 - 0)*log(1 - 0.8))
)
(-1*log(0.55) - (1 - 1)*log(1 - 0.55)))
(-1*log(0.55) - (1 - 1)*log(1 - 0.55))
(1.609438+0.597837)/2
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
(loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i]))))
}
(mean.log.loss = mean(loss.vector))
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
(loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i]))))
loss.vector
}
(mean.log.loss = mean(loss.vector))
(mean.log.loss = mean(loss.vector))
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
(loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i]))))
loss.vector
}
(mean.log.loss = mean(loss.vector))
print(loss.vector)
for (i in length(yprob)){
(loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i]))))
print(loss.vector)
}
(mean.log.loss = mean(loss.vector))
loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
print(loss.vector)
}
mean.log.loss = mean(loss.vector)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
print(loss.vector)
}
mean.log.loss = mean(loss.vector)
loss.vector
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
print(loss.vector)
}
mean.log.loss = mean(loss.vector)
loss.vector
loss.vector = append(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
loss.vector = append(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
print(loss.vector)
}
mean.log.loss = mean(loss.vector)
loss.vector
loss.vector
loss.vector = append(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
for (i in length(yprob)){
loss.vector = append(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
}
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = double()
for (i in length(yprob)){
loss.vector = append(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
}
loss.vector
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = double()
for (i in length(yprob)){
loss.vector = append(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
}
loss.vector
ytrue = c(0,1)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
loss.vector = c(loss.vector,(-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i])))
}
loss.vector
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
log.loss = (-(ytrue[i])*log(yprob[i])) - ((1 - ytrue[i])*log(1 - yprob[i]))
loss.vector = c(loss.vector,log.loss)
}
loss.vector
ytrue = c(0,1)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
loss.vector = c()
for (i in length(yprob)){
print('test')
}
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
for (i in yprob) {
log.loss = -(ytrue)*log(yprob)) - ((1 - ytrue)*log(1 - yprob)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
for (i in yprob) {
log.loss = -(ytrue)*log(yprob) - ((1 - ytrue)*log(1 - yprob)
}
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
log.loss = -(ytrue)*log(yprob) - ((1 - ytrue)*log(1 - yprob)
print(i)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
for (i in length(ypred)) {
print(i)
}
log.loss = -(ytrue)*log(yprob) - ((1 - ytrue)*log(1 - yprob)
ytrue = c(0,1)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
for (i in length(ypred)) {
print(i)
}
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
for (i in length(ypred)) {
print(i+1)
}
length(ypred)
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
for (i in length(ypred)) {
nvect = c(nvect, ypred[i])
}
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
nvect = c()
for (i in length(ypred)) {
nvect = c(nvect, ypred[i])
}
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
nvect = c()
for (i in 1:length(ypred)) {
nvect = c(nvect, ypred[i])
}
# inputs:
# ytrue is a vector of true binary responses (0 or 1)
# ypred is a vector of binary predictions (0 or 1)
# yprob is a vector of probabilistic predictions (between 0 and 1)
error.rate = function(ypred, ytrue){
# fill this in
correct = 0
for (i in 1:length(ypred)){
if (ypred[i] == ytrue[i]){
correct = correct + 1
}
}
incorrect = length(ytrue)-correct
err.rate = incorrect/length(ypred)
return(err.rate)
}
mean.log.loss = function(yprob, ytrue){
# fill this in
loss.vector = c()
for (i in 1:length(yprob)){
log.loss = -(ytrue[i])*log(yprob[i]) - (1 - ytrue[i])*log(1 - yprob[i])
loss.vector = c(loss.vector, log.loss)
}
mean.log.loss = mean(loss.vector)
return(mean.log.loss)
}
# Test:
ytrue = c(0,1)
ypred = c(1,1)
yprob = c(0.8,0.55)
print(paste('Error rate = ', error.rate(ypred, ytrue)))
print(paste('Mean log loss = ', round(mean.log.loss(yprob, ytrue),3)))
(-(0)*log(0.8) - (1 - 0)*log(1 - 0.8)) + (-(1)*log(0.5) - (1 - 1)*log(1 - 0.5))/2
((-(0)*log(0.8) - (1 - 0)*log(1 - 0.8)) + (-(1)*log(0.5) - (1 - 1)*log(1 - 0.5))/2
a
((-(0)*log(0.8) - (1 - 0)*log(1 - 0.8)) + (-(1)*log(0.5) - (1 - 1)*log(1 - 0.5)))/2
((-0*log(0.8) - (1 - 0)*log(1 - 0.8))+(-1*log(0.55) - (1 - 1)*log(1 - 0.55)))/2
install.packages("ISLR2")
install.packages("nnet")
?glm
?as
as.numeric(("male","female"))
?as.numeric
?knn
?Multinom
?multinom
?nnet
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
